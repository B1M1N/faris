#!/usr/bin/env python3
import tkinter as tk
from tkinter import scrolledtext
import threading
import openai

# --- API Key and Assistant ID Setup ---
# For testing purposes, we are directly assigning the API key.
# In production, consider using environment variables.
openai.api_key = "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"
ASSISTANT_ID = "asst_FDuUSbtE6aPgnDdUYV1lKgyE"

def chat_with_assistant(user_input):
    """
    This function uses the OpenAI beta threads endpoint to send a message to the assistant.
    Each call creates a new conversation thread using create_and_run.
    """
    print("DEBUG: chat_with_assistant called with:", user_input)
    try:
        response = openai.beta.threads.create_and_run(
            assistant_id=ASSISTANT_ID,
            thread={"messages": [{"role": "user", "content": user_input}]}
        )
        print("DEBUG: Received response:", response)
        messages = response["thread"]["messages"]
        if messages:
            # Return the content of the last message
            return messages[-1]["content"]
        return "No response from assistant."
    except Exception as e:
        print("DEBUG: Exception in chat_with_assistant:", e)
        return f"Error: {e}"

def send_message():
    """
    Called when the Send button is pressed. Retrieves the user input,
    updates the conversation log, and starts a background thread to call the assistant.
    """
    user_text = entry.get().strip()
    if not user_text:
        return
    update_log("User: " + user_text)
    entry.delete(0, tk.END)
    
    # Use a thread so that the GUI remains responsive.
    def worker():
        response = chat_with_assistant(user_text)
        # Safely update the GUI from the main thread.
        root.after(0, lambda: update_log("Assistant: " + response))
        
    threading.Thread(target=worker, name="AssistantWorker").start()

def update_log(text):
    """Appends text to the conversation log."""
    conversation_log.configure(state=tk.NORMAL)
    conversation_log.insert(tk.END, text + "\n")
    conversation_log.configure(state=tk.DISABLED)
    conversation_log.see(tk.END)

# --- GUI Setup ---
root = tk.Tk()
root.title("Simple Assistant Chat GUI")

# Create a scrolled text widget to display the conversation.
conversation_log = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=60, height=20, state=tk.DISABLED)
conversation_log.pack(padx=10, pady=10)

# Create an entry widget for the user to type their message.
entry = tk.Entry(root, width=50)
entry.pack(padx=10, pady=5)
entry.focus()

# Create a Send button to submit the message.
send_button = tk.Button(root, text="Send", command=send_message)
send_button.pack(padx=10, pady=5)

# Start the GUI event loop.
root.mainloop()

import openai
import time
import tkinter as tk
from tkinter import scrolledtext
import threading
from typing_extensions import override
from openai import AssistantEventHandler

# ضع مفتاح API الخاص بك
openai.api_key = "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"

# معرف المساعد (تأكد من صحة المعرف)
ASSISTANT_ID = "asst_FDuUSbtE6aPgnDdUYV1lKgyE"

# تعريف معرف الحوار العام (سيتم إنشاؤه مرة واحدة فقط)
conversation_thread_id = None

class EventHandler(AssistantEventHandler):
    """معالج الأحداث لبث الردود في الوقت الفعلي من OpenAI"""
    
    def __init__(self, chat_display):
        super().__init__()
        self.chat_display = chat_display

    @override
    def on_text_created(self, text) -> None:
        """يتم استدعاؤه عند بدء الرد"""
        self.chat_display.insert(tk.END, "\nAI: ", "bold")
        self.chat_display.yview(tk.END)

    @override
    def on_text_delta(self, delta, snapshot):
        """بث النص الوارد تدريجيًا"""
        self.chat_display.insert(tk.END, delta.value)
        self.chat_display.yview(tk.END)

def chat_with_assistant(user_input, chat_display):
    global conversation_thread_id

    # إنشاء الحوار (الثريد) مرة واحدة إذا لم يكن موجودًا
    if conversation_thread_id is None:
        thread = openai.beta.threads.create()
        conversation_thread_id = thread.id

    # إضافة رسالة المستخدم إلى الحوار المستمر
    openai.beta.threads.messages.create(
        thread_id=conversation_thread_id,
        role="user",
        content=user_input
    )

    # بث رد المساعد باستخدام نفس معرف الحوار
    with openai.beta.threads.runs.stream(
        thread_id=conversation_thread_id,
        assistant_id=ASSISTANT_ID,
        event_handler=EventHandler(chat_display)
    ) as stream:
        stream.until_done()

def send_message():
    """وظيفة إرسال رسالة المستخدم"""
    user_input = user_entry.get().strip()
    if user_input:
        chat_display.insert(tk.END, f"\nYou: {user_input}\n", "bold")
        user_entry.delete(0, tk.END)
        chat_display.yview(tk.END)

        # تشغيل استدعاء OpenAI في خيط منفصل لتجنب تجميد واجهة المستخدم
        threading.Thread(target=chat_with_assistant, args=(user_input, chat_display), daemon=True).start()

# إنشاء نافذة GUI
root = tk.Tk()
root.title("AI Chatbot with Streaming")

# نافذة عرض المحادثة (قابلة للتمرير)
chat_display = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=60, height=20, font=("Arial", 12))
chat_display.pack(padx=10, pady=10)
chat_display.tag_configure("bold", font=("Arial", 12, "bold"))

# حقل إدخال المستخدم
user_entry = tk.Entry(root, width=50, font=("Arial", 12))
user_entry.pack(padx=10, pady=5, side=tk.LEFT, expand=True)

# زر الإرسال
send_button = tk.Button(root, text="Send", command=send_message, font=("Arial", 12))
send_button.pack(padx=10, pady=5, side=tk.RIGHT)

# تشغيل واجهة المستخدم
root.mainloop()
